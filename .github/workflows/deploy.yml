name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  # Permet le déclenchement manuel du workflow
  workflow_dispatch:

# Définition des variables d'environnement globales
env:
  NODE_VERSION: '18'
  CACHE_KEY_PREFIX: v1

permissions:
  contents: write
  pages: write
  id-token: write

# Permet d'annuler les runs précédents non terminés
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Job de validation et tests
  validate:
    name: 🔍 Validate and Test
    runs-on: ubuntu-latest
    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v3

      - name: 🔧 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Lint check
        run: npm run lint || echo "No lint script found"

      - name: ✅ Run tests
        run: npm run test || echo "No test script found"

  # Job de build et déploiement
  build-and-deploy:
    name: 🚀 Build and Deploy
    needs: validate
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v3

      - name: 🔧 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build project
        run: npm run build

      - name: 📄 Create necessary files
        run: |
          touch ./dist/.nojekyll
          cp ./dist/index.html ./dist/404.html

      - name: 🚀 Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          folder: dist
          clean: true

      - name: 📝 Create deployment status
        if: success()
        run: |
          echo "🎉 Deployed successfully at $(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_STEP_SUMMARY
          echo "🌐 Site URL: https://shadestriescoding.github.io/Cabane-eva/" >> $GITHUB_STEP_SUMMARY

  # Job de notification
  notify:
    name: 📢 Notify
    needs: [build-and-deploy]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: 📧 Send deployment status
        if: always()
        run: |
          if [[ "${{ needs.build-and-deploy.result }}" == "success" ]]; then
            echo "✅ Deployment successful"
          else
            echo "❌ Deployment failed"
          fi

  # Job de maintenance (à exécuter périodiquement)
  maintenance:
    name: 🔧 Maintenance
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'

    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v3

      - name: 🧹 Clean up old deployments
        run: |
          git fetch --prune
          git gc --aggressive
          echo "Repository cleaned and optimized"

      - name: 📊 Generate deployment report
        run: |
          echo "## Deployment Report" >> $GITHUB_STEP_SUMMARY
          echo "Generated at: $(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_STEP_SUMMARY
          echo "Branch: ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY

# Workflow pour le back-office (à décommenter quand nécessaire)
#  deploy-backoffice:
#    name: 🎛️ Deploy Back Office
#    needs: validate
#    runs-on: ubuntu-latest
#    if: github.ref == 'refs/heads/main'
#
#    steps:
#      - name: ⬇️ Checkout repository
#        uses: actions/checkout@v3
#
#      - name: 🔧 Setup Node.js
#        uses: actions/setup-node@v3
#        with:
#          node-version: ${{ env.NODE_VERSION }}
#
#      - name: 📦 Install dependencies
#        working-directory: ./admin
#        run: npm ci
#
#      - name: 🏗️ Build back office
#        working-directory: ./admin
#        run: npm run build
#        env:
#          VITE_API_URL: ${{ secrets.VITE_ADMIN_API_URL }}
#          VITE_AUTH_DOMAIN: ${{ secrets.VITE_AUTH_DOMAIN }}
#
#      - name: 🚀 Deploy back office
#        # Ajouter ici la logique de déploiement du back-office 